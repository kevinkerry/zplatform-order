<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	<context:annotation-config />
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- 使用annotation 自动注册com.zlebank.zplatform.acc包下面的bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.zlebank.zplatform">
	</context:component-scan>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离   -->
              <value>file:D:/cert/*.properties</value> 
              <value>file:/home/web/trade/config/*.properties</value> 
              <value>classpath:*.properties</value>  
            </list>  
        </property>  
    </bean> 
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
 		<property name="jndiName" value="java:comp/env/jdbc/trade" /> 
 	</bean> 
      
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>com.zlebank.zplatform.order.dao.pojo</value>
				<value>com.zlebank.zplatform.commons.dao.pojo</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">validate</prop> -->
				<prop key="hibernate.connection.SetBigStringTryClob">true</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<!-- <propery name="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</property> -->

				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
	</bean>

	<!-- <bean id="accDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.101.178:1521:primary" />
		<property name="user" value="payservice" />
		<property name="password" value="payservice" />
		<property name="maxPoolSize" value="40" />
		<property name="minPoolSize" value="1" />
		<property name="initialPoolSize" value="1" />
		<property name="maxIdleTime" value="20" />

	</bean> -->
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven />
	
	

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
        p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:pool-config-ref="poolConfig"/>

 	<!-- <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/> -->
    
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory"   ref="connectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property> 
     </bean> 
    
    <bean class="com.zlebank.zplatform.hessian.hessianspring.HessianClientScannerConfigurer">
    <property name="basePackage" value="com.zlebank.zplatform.rmi"></property>
    <property name="annotationClass" value="com.zlebank.zplatform.hessian.core.Hessian"></property>
    <property name="locations">
        <list>
            <value>classpath:hessianurl.properties</value>
        </list>
    </property>
    </bean>
    <bean id="logHelper" class="com.zlebank.zplatform.order.utils.LogHelper"/>
	<aop:config>
	    <aop:aspect ref="logHelper">
	        <aop:pointcut id="pointcut" expression="execution(* com.zlebank.zplatform..*.*(..))"/>
	        <aop:before method="before"  pointcut-ref="pointcut" />
	        <aop:after method="after" pointcut-ref="pointcut" />
	        <aop:around method="around"  pointcut-ref="pointcut" />
	        <aop:after-throwing method="throwException" pointcut-ref="pointcut" throwing="ex" />
	    </aop:aspect>
	</aop:config>
</beans>